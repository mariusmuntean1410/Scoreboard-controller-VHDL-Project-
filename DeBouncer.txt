


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity DeBouncer is
    Port ( Clock : in STD_LOGIC;
           Reset : in STD_LOGIC;
           button_in : in STD_LOGIC;
           pulse_out : out STD_LOGIC);
end DeBouncer;

architecture Behavioral of DeBouncer is


constant COUNT_MAX : integer := 10000000; 

constant BTN_ACTIVE : std_logic := '1';

signal count : integer := 0;

type states is (idle, wait_time); --state machine
signal state : states := idle;

begin
  
process(Reset,Clock)
begin
    if (Reset = '1') then
        state <= idle;
        pulse_out <= '0';
   elsif(rising_edge(Clock)) then
        case (state) is
            when idle =>
                if(button_in = BTN_ACTIVE) then  
                    state <= wait_time;
                else
                    state <= idle; --wait until button is pressed.
                end if;
                pulse_out <= '0';
            when wait_time =>
                if(count = COUNT_MAX) then
                    count <= 0;
                    if(button_in = BTN_ACTIVE) then
                        pulse_out <= '1';
                    end if;
                    state <= idle;  
                else
                    count <= count + 1;
                end if; 
        end case;       
    end if;        
end process;                  
                                                                                
end architecture Behavioral;